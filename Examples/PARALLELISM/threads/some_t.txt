Очікування виконання потоку: join

Екземпляри класу Timer починають працювати з деякою затримкою, яку визначає програміст.

два примітива блокувань: Lock та RLock. Lock трохи швидший і більш низькорівневий, але він не рекурсивний і може бути ситуація потрапляння в DeadLock, коли виконання коду заблокується, кілька потоків чекатимуть, поки хтось віддасть Lock, а його ніхто ніколи вже не віддасть. Це і є ситуація, коли програма "зависла".
RLock трохи повільніший, зате виключає взаємне блокування. Рекомендується завжди використовувати саме його, якщо немає вагомих причин використовувати Lock. 
Якщо провести аналогію з життя, то Lock це коли у кожного потоку один і той самий ключ і будь-який потік може відкрити замок, хто б його не закрив із потоків. З RLock ситуація трохи інша, у кожного потоку свій ключ і свій замок. Потік може відкрити лише свій замок своїм ключем і не відкриє замок, якщо його закрив інший потік.

Семафори вказують, що певна кількість потоків можуть користуватися ресурсом одночасно і цим обмежують одночасну кількість потоків.

Є примітиви синхронізації, які дозволяють потокам очікувати сигналу від інших потоків — це Condition. Створимо дві різні функції: одна master повідомлятиме, що worker може продовжити роботу. При цьому вони будуть виконуватись у різних потоках.

потокобезпечний прапорець класу Event. Клас Event має внутрішній прапорець, який можуть встановлювати чи скидати інші потоки. Для цього використовують метод set, щоб встановити прапор та метод clear для скидання. Методу wait класу Event зупиняє роботу потоку до того часу, поки інший потік не встановить прапор методом set. Є можливість перевірити чи встановлено прапор методом is_set.
Таким чином, master може встановити прапорець класу Event, і всі worker потоки продовжать роботу тільки після отримання дозволу.

Barrier дозволяє задати умову, щоб кілька потоків продовжили роботу лише після того, як задане число потоків добереться у виконанні коду до цього "бар'єру".

------------------------------------------------------------
Пул потоків
В Python існує ще один механізм написання асинхронного коду. Ви можете скористатися пакетом concurrent.futures. Він дозволяє піднятися на більш високий рівень абстракції, коли вам просто потрібно паралельно виконати ряд однотипних завдань і немає необхідності вдаватися до низькорівневих деталей реалізації.
Основна ідея полягає у використанні реалізації абстрактного класу Executor. У concurrent.futures є дві реалізації цього абстрактного базового класу: ProcessPoolExecutor — для виконання коду окремих процесів (з ним ми познайомимося пізніше) та ThreadPoolExecutor — для виконання в окремих потоках.
Кожен такий Executor приховує набір потоків чи процесів, яким ви можете дати роботу та отримати результат її виконання. Вам не треба вручну керувати створенням потоків та їх коректним завершенням.








































